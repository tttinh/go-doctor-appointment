// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"
)

const fetchDoctorByUsername = `-- name: FetchDoctorByUsername :one
SELECT
  id, username, email, hashed_password, created_at, updated_at
FROM
  doctor d
WHERE
  d.username = $1
`

func (q *Queries) FetchDoctorByUsername(ctx context.Context, username string) (Doctor, error) {
	row := q.db.QueryRow(ctx, fetchDoctorByUsername, username)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchPatientByUsername = `-- name: FetchPatientByUsername :one
SELECT
  id, username, email, hashed_password, created_at, updated_at
FROM
  patient p
WHERE
  p.username = $1
`

func (q *Queries) FetchPatientByUsername(ctx context.Context, username string) (Patient, error) {
	row := q.db.QueryRow(ctx, fetchPatientByUsername, username)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertDoctor = `-- name: InsertDoctor :one
INSERT INTO
  doctor (username, email, hashed_password)
VALUES
  ($1, $2, $3)
RETURNING
  id, username, email, hashed_password, created_at, updated_at
`

type InsertDoctorParams struct {
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) InsertDoctor(ctx context.Context, arg InsertDoctorParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, insertDoctor, arg.Username, arg.Email, arg.HashedPassword)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPatient = `-- name: InsertPatient :one
INSERT INTO
  patient (username, email, hashed_password)
VALUES
  ($1, $2, $3)
RETURNING
  id, username, email, hashed_password, created_at, updated_at
`

type InsertPatientParams struct {
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) InsertPatient(ctx context.Context, arg InsertPatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, insertPatient, arg.Username, arg.Email, arg.HashedPassword)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
