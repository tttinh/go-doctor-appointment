openapi: 3.0.4
info:
  title: Doctor Appointment API
  description: Doctor API documentation
  contact:
    email: nz.tinhtt@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
  - name: doctor
  - name: patient
servers:
  - url: http://localhost:8080/api
paths:
  /doctor/signup:
    post:
      tags:
        - doctor
      operationId: signupDoctor
      summary: Create a new doctor account.
      requestBody:
        $ref: '#/components/requestBodies/SignupDoctorReq'
      responses:
        '200':
          $ref: '#/components/responses/SignupDoctorRes'
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /doctor/signin:
    post:
      tags:
        - doctor
      operationId: signinDoctor
      summary: Logs a doctor into the system.
      requestBody:
        $ref: '#/components/requestBodies/SigninDoctorReq'
      responses:
        '200':
          $ref: '#/components/responses/SigninDoctorRes'
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /doctor/{id}/calendar:
    get:
      tags:
        - doctor
      operationId: getDoctorCalendar
      summary: Get the doctor's calendar.
      parameters:
        - in: path
          name: id
          description: ID of the doctor
          schema:
            type: integer
          required: true
      responses:
        '200':
          $ref: '#/components/responses/CalendarRes'
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /doctor/slot:
    post:
      security:
        - bearerAuth: []
      tags:
        - doctor
      operationId: addSlots
      summary: Create available slots.
      requestBody:
        $ref: '#/components/requestBodies/AddSlotsReq'
      responses:
        '200':
          description: OK.
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /doctor/slot/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - doctor
      operationId: updateSlotAvailability
      summary: Update the availability of a slot.
      parameters:
        - in: path
          name: id
          description: ID of the slot
          schema:
            type: integer
          required: true
      requestBody:
        $ref: '#/components/requestBodies/UpdateSlotAvailabilityReq'
      responses:
        '200':
          description: OK.
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /doctor/appointment:
    get:
      security:
        - bearerAuth: []
      tags:
        - doctor
      operationId: listDoctorAppointments
      summary: Get appointments of the current week
      responses:
        '200':
          description: OK.
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /patient/signup:
    post:
      tags:
        - patient
      operationId: signupPatient
      summary: Create a new patient account.
      requestBody:
        $ref: '#/components/requestBodies/SignupPatientReq'
      responses:
        '200':
          $ref: '#/components/responses/SignupPatientRes'
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /patient/signin:
    post:
      tags:
        - patient
      operationId: signinPatient
      summary: Logs a patient into the system.
      requestBody:
        $ref: '#/components/requestBodies/SigninPatientReq'
      responses:
        '200':
          $ref: '#/components/responses/SigninPatientRes'
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
  /patient/appointment:
    get:
      security:
        - bearerAuth: []
      tags:
        - patient
      operationId: listPatientAppointments
      summary: Get appointments of the current week
      responses:
        '200':
          description: OK.
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
    post:
      security:
        - bearerAuth: []
      tags:
        - patient
      operationId: createAppointment
      summary: Create a new appointment.
      requestBody:
        $ref: '#/components/requestBodies/CreateAppointmentReq'
      responses:
        '200':
          $ref: '#/components/responses/CreateAppointmentRes'
        "400":
          $ref: '#/components/responses/ErrorRes'
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: Not found entity.
        "5XX":
          description: Unexpected error.
components:
  requestBodies:
    SignupDoctorReq:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupDoctor'
    SigninDoctorReq:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SigninDoctor'
    SignupPatientReq:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupPatient'
    SigninPatientReq:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SigninPatient'
    AddSlotsReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              slots:
                type: array
                items:
                  type: string
                  format: date-time
    CreateAppointmentReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              slotID:
                type: integer
              note:
                type: string
    UpdateSlotAvailabilityReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              availability:
                type: boolean
  responses:
    ErrorRes:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    SignupDoctorRes:
      description: OK.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Doctor'
    SigninDoctorRes:
      description: OK.
      content:
        application/json:
          schema:
            type: object
            properties:
              doctor:
                $ref: '#/components/schemas/Doctor'
              token:
                type: string
    SignupPatientRes:
      description: OK.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Patient'
    SigninPatientRes:
      description: OK.
      content:
        application/json:
          schema:
            type: object
            properties:
              patient:
                $ref: '#/components/schemas/Patient'
              token:
                type: string
    CreateAppointmentRes:
      description: OK.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Appointment'
    CalendarRes:
      description: OK.
      content:
        application/json:
          schema:
            type: object
            properties:
              slots:
                type: array
                items:
                  $ref: '#/components/schemas/Slot'
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    SignupDoctor:
      type: object
      properties:
        username:
          type: string
          example: john
        email:
          type: string
          example: john@email.com
        password:
          type: string
          format: password
          example: '12345'
      required:
        - username
        - email
        - password
    SigninDoctor:
      type: object
      properties:
        username:
          type: string
          example: john
        password:
          type: string
          format: password
          example: '12345'
      required:
        - username
        - password
    Doctor:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        bio:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SignupPatient:
      type: object
      properties:
        username:
          type: string
          example: john
        email:
          type: string
          example: john@email.com
        password:
          type: string
          format: password
          example: '12345'
      required:
        - username
        - email
        - password
    SigninPatient:
      type: object
      properties:
        username:
          type: string
          example: john
        password:
          type: string
          format: password
          example: '12345'
      required:
        - username
        - password
    Patient:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Appointment:
      type: object
      properties:
        id:
          type: integer
        doctor:
          type: string
        patient:
          type: string
        completed:
          type: boolean
        time:
          type: string
          format: date-time
    Slot:
      type: object
      properties:
        id:
          type: integer
        available:
          type: boolean
        time:
          type: string
          format: date-time
        appointment:
          $ref: '#/components/schemas/Appointment'
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description:
        "For accessing the protected API resources, you must have received\
        \ a a valid JWT token after registering or logging in. This JWT token must\
        \ then be used for all protected resources by passing it in via the 'Authorization'\
        \ header.\n    \n"